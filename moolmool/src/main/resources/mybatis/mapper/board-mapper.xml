<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">

	<resultMap type="java.util.HashMap" id="prevAndNextTitleResultMap">
		<result property="nextTitle" column="next_title"/>
		<result property="nextBno" column="next_bno"/>
		<result property="prevTitle" column="prev_title"/>
		<result property="prevBno" column="prev_bno"/>
	</resultMap>

	<sql id="searchQuery">
		<if test="searchInfo != null and searchInfo.sType != null and searchInfo.sType != ''">
			<choose>
				<when test='searchInfo.sType.equals("t")'>
					AND title LIKE '%'||#{searchInfo.sKeyword}||'%'
				</when>
				<when test='searchInfo.sType.equals("c")'>
					AND content LIKE '%'||#{searchInfo.sKeyword}||'%'
				</when>
				<when test='searchInfo.sType.equals("tc")'>
					AND (title LIKE '%'||#{searchInfo.sKeyword}||'%'
						OR content LIKE '%'||#{searchInfo.sKeyword}||'%')
				</when>
				<when test='searchInfo.sType.equals("w")'>
					AND writer_nickname LIKE '%'||#{searchInfo.sKeyword}||'%'
				</when>
				<when test='searchInfo.sType.equals("wn")'>
					AND writer_no LIKE '%'||#{searchInfo.sKeyword}||'%'
				</when>
				<otherwise>
					AND (title LIKE '%'||#{searchInfo.sKeyword}||'%'
						OR content LIKE '%'||#{searchInfo.sKeyword}||'%'
						OR writer_nickname LIKE '%'||#{searchInfo.sKeyword}||'%')
				</otherwise>
			</choose>
		</if>
	</sql>
	
	
	<!-- Board -->
	<insert id="insertBoard" parameterType="boardVO">
		INSERT INTO board (bno, title, content, bt_code, writer_no, 
			writer_nickname, regdate, moddate, hit, is_deleted)
		VALUES (SEQ_BOARD_BNO.NEXTVAL, #{title}, #{content}, #{btCode},
			#{writerNo}, #{writerNickname}, SYSDATE, SYSDATE, DEFAULT, DEFAULT)
	</insert>
	
	<select id="getBoardDetail" parameterType="int" resultType="boardVO">
		SELECT b.bno, b.title, b.content, b.writer_no, b.bt_code,
			b.writer_nickname, b.regdate, b.moddate, b.hit, b.is_deleted, p.html_tag psc_html_tag,
			(SELECT SUM(DECODE(e_type, 'LIKE', 1, -1)) 
				FROM board_evaluate 
				WHERE bno = #{bno}) score,
			(SELECT COUNT(bno)  
				FROM board_report 
         		WHERE bno = #{bno}) report_count
		FROM board b
		LEFT JOIN 
			member m ON (b.writer_no = mem_no)
		LEFT JOIN 
			personacon p ON (m.psc_code = p.psc_no)
		WHERE b.bno = #{bno}
			AND b.is_deleted = 'N'
	</select>
	
	<select id="getPrevAndNextTitle" parameterType="int" resultMap="prevAndNextTitleResultMap">
		SELECT next_title, next_bno, prev_title , prev_bno
		FROM
			(
			  SELECT bno, title,
			  	LEAD(title, 1) OVER (ORDER BY bno) next_title,
			  	LEAD(bno, 1) OVER (ORDER BY bno) next_bno,
			  	LAG(title, 1) OVER (ORDER BY bno) prev_title,
			  	LAG(bno, 1) OVER (ORDER BY bno) prev_bno
			  FROM BOARD
			  WHERE bt_code = (SELECT bt_code FROM BOARD WHERE bno = #{bno})
			)
		WHERE bno = #{bno}
	</select>
	
	<select id="getBoardList" parameterType="map" resultType="boardVO">
		SELECT pno, b.bno, b.title, b.writer_no, b.writer_nickname, 
			b.regdate, b.moddate, b.hit, b.is_deleted, b.bt_code, COUNT(c.bno) cmt_count, p.html_tag psc_html_tag, count(r.bno) report_count
		FROM (
			SELECT CEIL(ROWNUM / 10) page, RANK() OVER (ORDER BY bno ASC) pno, bno, title, 
				writer_no, writer_nickname, regdate, moddate, hit, is_deleted, bt_code
			FROM (
				SELECT bno, title, writer_no, writer_nickname,
					regdate, moddate, hit, is_deleted, bt_code
				FROM board 
				WHERE is_deleted = 'N'
					AND bt_code = #{btCode}
					<include refid="searchQuery" />
				ORDER BY bno DESC
			)
		) b 
		LEFT JOIN 
			(SELECT bno FROM board_comment WHERE is_deleted = 'N') c ON (b.bno = c.bno)
		LEFT JOIN 
			member m ON (b.writer_no = mem_no)
		LEFT JOIN 
			personacon p ON (m.psc_code = p.psc_no)
		LEFT JOIN 
      		board_report r ON (r.bno = b.bno)
		WHERE page = #{page}
		GROUP BY pno, b.bno, b.title, b.writer_no, b.writer_nickname, b.regdate, 
			b.moddate, b.hit, b.is_deleted, b.bt_code, p.html_tag, r.bno
		ORDER BY b.bno DESC
	</select>
	
	<select id="getBoardTotalCount" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		FROM board
		WHERE is_deleted = 'N'
			AND bt_code = #{btCode}
			<include refid="searchQuery" />
	</select>
	
	<update id="deleteBoard" parameterType="int">
		UPDATE board 
		SET is_deleted = 'Y'
		WHERE bno = #{bno}
	</update>
	
	<update id="updateBoard" parameterType="boardVO">
		UPDATE board 
		SET title = #{title}, content = #{content}, moddate = SYSDATE
		WHERE bno = #{bno}
	</update>
	
	<update id="updateHit" parameterType="int">
		UPDATE board
		SET hit = hit + 1
		WHERE bno = #{bno}
	</update>
	
	<select id="getBoardMainList" resultType="boardVO"> -- 성능 x
	<![CDATA[
		SELECT bno, title, 'new' bt_code
		FROM 
		 	(SELECT bno, title, bt_code 
		 	FROM board 
		 	WHERE is_deleted = 'N'
		 	ORDER BY bno DESC)
		WHERE ROWNUM <= 5
	]]>
	<foreach collection="list" item="btype">
		<![CDATA[
		UNION
			SELECT bno, title, bt_code 
			FROM 
		  	(SELECT bno, title, bt_code 
		  	FROM board 
		  	WHERE bt_code = #{btype.btCode}
		  		AND is_deleted = 'N'
		  	ORDER BY bno DESC)
			WHERE ROWNUM <= 5
		]]>
	</foreach>
		ORDER BY bno DESC
	</select>
	
	
	<!-- BoardType -->
	<select id="getBoardTypeDetail" parameterType="String" resultType="boardTypeVO">
		SELECT bt_code, bt_name, description 
		FROM board_type
		WHERE bt_code = #{btCode}
	</select>
	
	<select id="getBoardTypeList" resultType="boardTypeVO">
		SELECT bt_code, bt_name, description
		FROM board_type
	</select>
	
	<insert id="insertBoardType" parameterType="boardTypeVO">
		INSERT INTO board_type (bt_code, bt_name, description)
		VALUES (#{btCode}, #{btName}, #{description})
	</insert>
	
	<update id="updateBoardType" parameterType="boardTypeVO">
		UPDATE board_type
		SET description = #{description}
		WHERE bt_code = #{btCode}
	</update>
	
	<delete id="deleteBoardType" parameterType="String">
		DELETE FROM board_type
		WHERE bt_code = #{btCode}
	</delete>
	
	
	<!-- BoardComment -->
	<insert id="insertBoardComment" parameterType="boardCommentVO">
		INSERT INTO board_comment (cno, bno, content, writer_no, 
			writer_nickname, parent_writer_no, parent_writer_nickname, 
			regdate, parent_no, is_deleted)
		VALUES (SEQ_BOARD_COMMNET_CNO.NEXTVAL, #{bno}, #{content}, #{writerNo}, 
			#{writerNickname}, #{parentWriterNo}, #{parentWriterNickname},
			SYSDATE, #{parentNo}, DEFAULT)
	</insert>
	
	<select id="getBoardCommentDetail" parameterType="int" resultType="boardCommentVO">
		SELECT cno, bno, content, writer_no, writer_nickname, parent_writer_no,
			parent_writer_nickname, regdate, moddate, parent_no, is_deleted
		FROM board_comment
		WHERE cno = #{cno}
	</select>
	
	<select id="getBoardCommentList" parameterType="map" resultType="boardCommentVO">
		SELECT cno, bno, content, writer_no, writer_nickname, parent_writer_no,
			parent_writer_nickname, regdate, moddate, parent_no, is_deleted
		FROM (
			SELECT CEIL(ROWNUM / 10) page, cno, bno, content, writer_no, 
				writer_nickname, parent_writer_no, parent_writer_nickname, 
				regdate, moddate, parent_no, is_deleted
			FROM (
				SELECT cno, bno, content, writer_no, writer_nickname, parent_writer_no,
					parent_writer_nickname, regdate, moddate, parent_no, is_deleted
				FROM board_comment
				WHERE bno = #{bno}
					AND is_deleted = 'N'
				ORDER BY cno
			)
		) WHERE page = #{cpage}
	</select>
	
	<update id="updateBoardComment" parameterType="boardCommentVO">
		UPDATE board_comment 
		SET content = #{content}, moddate = SYSDATE
		WHERE cno = #{cno}
	</update>
	
	<update id="deleteBoardComment" parameterType="int">
		UPDATE board_comment
		SET is_deleted = 'Y'
		WHERE cno = #{cno}
	</update>
	
	<select id="getBoardCommentCount" parameterType="int" resultType="int">
		SELECT COUNT(*) 
		FROM board_comment
		WHERE bno = #{bno}
			AND is_deleted = 'N'
	</select>
	
	
	<!-- 게시물 신고 -->
	<select id="getExistsBoardReport" parameterType="boardReportVO" resultType="int">
		SELECT COUNT(*) 
		FROM board_report
		WHERE bno = #{bno}
			AND mem_no = #{memNo}
	</select>
	
	<insert id="insertBoardReport" parameterType="boardReportVO">
		INSERT INTO board_report (bno, mem_no, regdate)
		VALUES (#{bno}, #{memNo}, SYSDATE)
	</insert>
	
	<!-- 게시물 평가 -->
	<select id="getExistsBoardEvaluate" parameterType="boardEvaluateVO" resultType="int">
		SELECT COUNT(*)
		FROM board_evaluate
		WHERE bno = #{bno}
			AND mem_no = #{memNo}
	</select>
	
	<insert id="insertBoardEvaluate" parameterType="boardEvaluateVO">
		INSERT INTO board_evaluate (bno, mem_no, regdate, e_type)
		VALUES (#{bno}, #{memNo}, SYSDATE, #{eType})
	</insert>
	
	
</mapper>